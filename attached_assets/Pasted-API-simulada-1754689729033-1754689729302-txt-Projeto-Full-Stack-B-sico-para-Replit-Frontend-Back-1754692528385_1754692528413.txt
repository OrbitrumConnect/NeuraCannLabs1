API-simulada-1754689729033_1754689729302.txt
Projeto Full Stack Básico para Replit (Frontend + Backend)
Backend — Node.js + Express (API simulada)
javascript
Copiar
Editar
// server/index.js

import express from "express";
import cors from "cors";

const app = express();
const PORT = 4000;

app.use(cors());
app.use(express.json());

// Dados simulados para dashboards
const scientificData = [
  { id: 1, title: "Estudo A sobre CBD e Epilepsia", date: "2025-07-01" },
  { id: 2, title: "Pesquisa B sobre THC e dor crônica", date: "2025-07-05" },
];

const clinicalCases = [
  { id: 1, description: "Paciente X melhorou após uso de CBD", doctor: "Dr. Silva" },
  { id: 2, description: "Paciente Y apresentou efeitos adversos leves", doctor: "Dra. Souza" },
];

const alerts = [
  { id: 1, message: "Novo protocolo aprovado para uso de cannabis em SP", date: "2025-07-10" },
  { id: 2, message: "Artigo importante publicado sobre CBG", date: "2025-07-11" },
];

const userProfile = {
  name: "Dr. João",
  specialty: "Neurologia",
  email: "joao@example.com",
};

app.get("/api/scientific", (req, res) => {
  res.json(scientificData);
});

app.get("/api/clinical", (req, res) => {
  res.json(clinicalCases);
});

app.get("/api/alerts", (req, res) => {
  res.json(alerts);
});

app.get("/api/profile", (req, res) => {
  res.json(userProfile);
});

app.listen(PORT, () => {
  console.log(`API rodando na porta ${PORT}`);
});
Frontend — React + Tailwind + fetch API
jsx
Copiar
Editar
// src/App.jsx
import React, { useState, useEffect } from "react";

const avatarSvg = (
  <svg
    className="w-24 h-24 text-cyan-400 animate-pulse"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    viewBox="0 0 24 24"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <circle cx="12" cy="7" r="4" />
    <path d="M5.5 21a7 7 0 0 1 13 0" />
  </svg>
);

export default function App() {
  const [menuOpen, setMenuOpen] = useState(false);
  const [dashboard, setDashboard] = useState("scientific");
  const [scientificData, setScientificData] = useState([]);
  const [clinicalCases, setClinicalCases] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);

  // Função para buscar dados da API
  async function fetchData(endpoint, setData) {
    try {
      const res = await fetch(`http://localhost:4000/api/${endpoint}`);
      const json = await res.json();
      setData(json);
    } catch (err) {
      console.error(`Erro ao buscar ${endpoint}`, err);
    }
  }

  useEffect(() => {
    setLoading(true);
    Promise.all([
      fetchData("scientific", setScientificData),
      fetchData("clinical", setClinicalCases),
      fetchData("alerts", setAlerts),
      fetchData("profile", setProfile),
    ]).finally(() => setLoading(false));
  }, []);

  const dashboards = {
    scientific: {
      title: "Dados Científicos",
      content: (
        <div>
          {loading ? (
            <p>Carregando dados científicos...</p>
          ) : (
            <ul className="list-disc list-inside">
              {scientificData.map((item) => (
                <li key={item.id}>
                  <strong>{item.title}</strong> - {item.date}
                </li>
              ))}
            </ul>
          )}
        </div>
      ),
    },
    clinical: {
      title: "Casos Clínicos",
      content: (
        <div>
          {loading ? (
            <p>Carregando casos clínicos...</p>
          ) : (
            <ul className="list-disc list-inside">
              {clinicalCases.map((caseItem) => (
                <li key={caseItem.id}>
                  {caseItem.description} <em>({caseItem.doctor})</em>
                </li>
              ))}
            </ul>
          )}
        </div>
      ),
    },
    alerts: {
      title: "Alertas",
      content: (
        <div>
          {loading ? (
            <p>Carregando alertas...</p>
          ) : (
            <ul className="list-disc list-inside">
              {alerts.map((alert) => (
                <li key={alert.id}>
                  {alert.message} <small>({alert.date})</small>
                </li>
              ))}
            </ul>
          )}
        </div>
      ),
    },
    profile: {
      title: "Perfil",
      content: (
        <div>
          {loading || !profile ? (
            <p>Carregando perfil...</p>
          ) : (
            <div>
              <p>
                <strong>Nome:</strong> {profile.name}
              </p>
              <p>
                <strong>Especialidade:</strong> {profile.specialty}
              </p>
              <p>
                <strong>Email:</strong> {profile.email}
              </p>
            </div>
          )}
        </div>
      ),
    },
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
      {/* Cabeçalho */}
      <header className="flex items-center justify-between bg-gray-800 px-4 py-3 shadow-md fixed w-full z-20 top-0">
        <h1...