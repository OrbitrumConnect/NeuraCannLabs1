Projeto Full Stack Básico para Replit (Frontend + Backend)
Backend — Node.js + Express (API simulada)
javascript
Copiar
Editar
// server/index.js

import express from "express";
import cors from "cors";

const app = express();
const PORT = 4000;

app.use(cors());
app.use(express.json());

// Dados simulados para dashboards
const scientificData = [
  { id: 1, title: "Estudo A sobre CBD e Epilepsia", date: "2025-07-01" },
  { id: 2, title: "Pesquisa B sobre THC e dor crônica", date: "2025-07-05" },
];

const clinicalCases = [
  { id: 1, description: "Paciente X melhorou após uso de CBD", doctor: "Dr. Silva" },
  { id: 2, description: "Paciente Y apresentou efeitos adversos leves", doctor: "Dra. Souza" },
];

const alerts = [
  { id: 1, message: "Novo protocolo aprovado para uso de cannabis em SP", date: "2025-07-10" },
  { id: 2, message: "Artigo importante publicado sobre CBG", date: "2025-07-11" },
];

const userProfile = {
  name: "Dr. João",
  specialty: "Neurologia",
  email: "joao@example.com",
};

app.get("/api/scientific", (req, res) => {
  res.json(scientificData);
});

app.get("/api/clinical", (req, res) => {
  res.json(clinicalCases);
});

app.get("/api/alerts", (req, res) => {
  res.json(alerts);
});

app.get("/api/profile", (req, res) => {
  res.json(userProfile);
});

app.listen(PORT, () => {
  console.log(`API rodando na porta ${PORT}`);
});
Frontend — React + Tailwind + fetch API
jsx
Copiar
Editar
// src/App.jsx
import React, { useState, useEffect } from "react";

const avatarSvg = (
  <svg
    className="w-24 h-24 text-cyan-400 animate-pulse"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    viewBox="0 0 24 24"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <circle cx="12" cy="7" r="4" />
    <path d="M5.5 21a7 7 0 0 1 13 0" />
  </svg>
);

export default function App() {
  const [menuOpen, setMenuOpen] = useState(false);
  const [dashboard, setDashboard] = useState("scientific");
  const [scientificData, setScientificData] = useState([]);
  const [clinicalCases, setClinicalCases] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);

  // Função para buscar dados da API
  async function fetchData(endpoint, setData) {
    try {
      const res = await fetch(`http://localhost:4000/api/${endpoint}`);
      const json = await res.json();
      setData(json);
    } catch (err) {
      console.error(`Erro ao buscar ${endpoint}`, err);
    }
  }

  useEffect(() => {
    setLoading(true);
    Promise.all([
      fetchData("scientific", setScientificData),
      fetchData("clinical", setClinicalCases),
      fetchData("alerts", setAlerts),
      fetchData("profile", setProfile),
    ]).finally(() => setLoading(false));
  }, []);

  const dashboards = {
    scientific: {
      title: "Dados Científicos",
      content: (
        <div>
          {loading ? (
            <p>Carregando dados científicos...</p>
          ) : (
            <ul className="list-disc list-inside">
              {scientificData.map((item) => (
                <li key={item.id}>
                  <strong>{item.title}</strong> - {item.date}
                </li>
              ))}
            </ul>
          )}
        </div>
      ),
    },
    clinical: {
      title: "Casos Clínicos",
      content: (
        <div>
          {loading ? (
            <p>Carregando casos clínicos...</p>
          ) : (
            <ul className="list-disc list-inside">
              {clinicalCases.map((caseItem) => (
                <li key={caseItem.id}>
                  {caseItem.description} <em>({caseItem.doctor})</em>
                </li>
              ))}
            </ul>
          )}
        </div>
      ),
    },
    alerts: {
      title: "Alertas",
      content: (
        <div>
          {loading ? (
            <p>Carregando alertas...</p>
          ) : (
            <ul className="list-disc list-inside">
              {alerts.map((alert) => (
                <li key={alert.id}>
                  {alert.message} <small>({alert.date})</small>
                </li>
              ))}
            </ul>
          )}
        </div>
      ),
    },
    profile: {
      title: "Perfil",
      content: (
        <div>
          {loading || !profile ? (
            <p>Carregando perfil...</p>
          ) : (
            <div>
              <p>
                <strong>Nome:</strong> {profile.name}
              </p>
              <p>
                <strong>Especialidade:</strong> {profile.specialty}
              </p>
              <p>
                <strong>Email:</strong> {profile.email}
              </p>
            </div>
          )}
        </div>
      ),
    },
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
      {/* Cabeçalho */}
      <header className="flex items-center justify-between bg-gray-800 px-4 py-3 shadow-md fixed w-full z-20 top-0">
        <h1 className="text-2xl font-bold text-cyan-400 cursor-default select-none">
          Cannabis Clinical Hub
        </h1>
        <button
          aria-label="Menu"
          className="focus:outline-none"
          onClick={() => setMenuOpen(!menuOpen)}
        >
          <svg
            className="w-8 h-8 text-cyan-400"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            viewBox="0 0 24 24"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <path d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </header>

      {/* Menu lateral (overlay) */}
      <nav
        className={`fixed top-0 left-0 h-full w-64 bg-gray-800 shadow-xl transform transition-transform duration-300 z-30
        ${menuOpen ? "translate-x-0" : "-translate-x-full"}`}
      >
        <div className="p-6">
          <h2 className="text-xl font-semibold text-cyan-400 mb-6 select-none">
            Dashboards
          </h2>
          <ul>
            {Object.entries(dashboards).map(([key, dash]) => (
              <li key={key} className="mb-4">
                <button
                  onClick={() => {
                    setDashboard(key);
                    setMenuOpen(false);
                  }}
                  className={`w-full text-left px-3 py-2 rounded hover:bg-cyan-700 transition-colors
                    ${
                      dashboard === key
                        ? "bg-cyan-600 font-bold"
                        : "font-normal"
                    }`}
                >
                  {dash.title}
                </button>
              </li>
            ))}
          </ul>
        </div>
      </nav>

      {/* Conteúdo principal */}
      <main className="flex-grow pt-20 px-8 pb-10 max-w-5xl mx-auto">
        {/* Avatar + título */}
        <section className="flex items-center space-x-6 mb-10">
          <div>{avatarSvg}</div>
          <h2 className="text-3xl font-semibold text-cyan-400 select-none">
            {dashboards[dashboard].title}
          </h2>
        </section>

        {/* Conteúdo do dashboard */}
        <section className="bg-gray-800 rounded-lg p-6 shadow-lg min-h-[300px]">
          {dashboards[dashboard].content}
        </section>
      </main>

      {/* Rodapé simples */}
      <footer className="text-center text-gray-500 text-sm p-4 select-none">
        &copy; 2025 Cannabis Clinical Hub — Todos os direitos reservados
      </footer>
    </div>
  );
}
Como rodar no Replit
Crie um novo projeto Node.js para o backend, cole o código do backend (server/index.js).

Crie um projeto React (ou React + Vite) para o frontend, cole o código do frontend (src/App.jsx).

Configure no frontend o fetch para apontar para a URL correta do backend (no Replit use a URL pública do backend).

Rode backend e frontend simultaneamente (no Replit use Workspaces ou múltiplos projetos).

Próximos passos
Integrar banco de dados real (Postgres, Supabase)

Adicionar autenticação segura (OAuth, JWT)

Construir pipelines automáticos para ingestão de dados científicos

Integrar IA para análise, resumo e síntese de dados

Criar visualização 3D e avatar avançado

Desenvolver notificações em tempo real

Se quiser, posso ajudar a montar cada um desses próximos passos em detalhes ou entregar trechos de