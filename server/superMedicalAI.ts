import OpenAI from "openai";
import { storage } from "./storage";

// Super IA M√©dica com Conhecimento Especializado
export class SuperMedicalAI {
  private openai: OpenAI | null;
  private medicalKnowledgeBase: string[];
  private conversationHistory: Map<string, any[]> = new Map();

  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      console.warn("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada - Super IA M√©dica em modo limitado");
      this.openai = null;
    } else {
      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });
      console.log("üß† Super IA M√©dica inicializada com ChatGPT-4o");
    }

    // Base de conhecimento m√©dico especializado (ser√° expandida com a API externa)
    this.medicalKnowledgeBase = [
      "Cannabis medicinal para tratamento de epilepsia refrat√°ria",
      "Dosagem de CBD para ansiedade em idosos",
      "Intera√ß√µes medicamentosas entre THC e anticoagulantes",
      "Protocolos de titula√ß√£o para dor cr√¥nica neurop√°tica",
      "Efeitos adversos de cannabinoides em pediatria"
    ];
  }

  // Busca dados relevantes no banco para a consulta (expandido para estudos cruzados)
  private async searchRelevantData(question: string, context: string = 'standard'): Promise<string> {
    try {
      console.log(`üîç Buscando dados para: "${question}" | Contexto: ${context}`);
      
      // Expande termos de busca para melhor precis√£o
      const searchTerms = this.expandSearchTerms(question.toLowerCase());
      console.log(`üéØ Termos expandidos: ${searchTerms.join(', ')}`);
      
      // Busca estudos cient√≠ficos relevantes
      const studies = await storage.getScientificStudies();
      console.log(`üìö Total de estudos dispon√≠veis: ${studies.length}`);
      
      const relevantStudies = studies.filter(study => {
        const matches = searchTerms.some(term => 
          study.title.toLowerCase().includes(term) ||
          study.description?.toLowerCase().includes(term) ||
          study.compound?.toLowerCase().includes(term) ||
          study.indication?.toLowerCase().includes(term) ||
          study.keywords?.some(keyword => keyword.toLowerCase().includes(term))
        );
        if (matches) console.log(`‚úÖ Estudo encontrado: ${study.title}`);
        return matches;
      }).slice(0, 3); // Top 3 mais relevantes

      // Busca casos cl√≠nicos similares
      const cases = await storage.getClinicalCases();
      console.log(`üè• Total de casos dispon√≠veis: ${cases.length}`);
      
      const relevantCases = cases.filter(case_ => {
        const matches = searchTerms.some(term =>
          case_.description.toLowerCase().includes(term) ||
          case_.diagnosis?.toLowerCase().includes(term) ||
          case_.indication?.toLowerCase().includes(term) ||
          case_.compound?.toLowerCase().includes(term)
        );
        if (matches) console.log(`‚úÖ Caso encontrado: ${case_.caseNumber}`);
        return matches;
      }).slice(0, 2); // Top 2 mais relevantes

      // Busca conversas anteriores do sistema de aprendizado
      const conversations = await storage.getConversations();
      const similarConversations = conversations.filter(conv =>
        conv.userMessage.toLowerCase().includes(question.toLowerCase()) ||
        conv.medicalTopic === this.extractMedicalTopic(question)
      ).slice(0, 2); // Top 2 similares

      // Se for contexto de estudos cruzados, busca dados adicionais do f√≥rum
      let forumData: any[] = [];
      if (context === 'cross_study_research') {
        try {
          // Simula busca de posts relevantes do f√≥rum (implementar quando houver f√≥rum)
          forumData = [
            { title: "Dosagem CBD em idosos - discuss√£o semanal", relevance: "high" },
            { title: "Intera√ß√µes medicamentosas - casos recentes", relevance: "medium" }
          ];
        } catch (error) {
          console.log("F√≥rum data n√£o dispon√≠vel ainda");
        }
      }

      let contextData = context === 'cross_study_research' ? 
        "DADOS COMPLETOS DA PLATAFORMA PARA ESTUDOS CRUZADOS:\n\n" :
        "DADOS DO BANCO PARA CONSULTA:\n\n";
      
      if (relevantStudies.length > 0) {
        contextData += "ESTUDOS CIENT√çFICOS RELEVANTES:\n";
        relevantStudies.forEach(study => {
          contextData += `- ${study.title} (${study.year})\n  Resultado: ${study.conclusion}\n`;
        });
        contextData += "\n";
      }

      if (relevantCases.length > 0) {
        contextData += "CASOS CL√çNICOS SIMILARES:\n";
        relevantCases.forEach(case_ => {
          contextData += `- Caso ${case_.caseNumber}: ${case_.description}\n  Diagn√≥stico: ${case_.diagnosis}\n`;
        });
        contextData += "\n";
      }

      if (similarConversations.length > 0) {
        contextData += "EXPERI√äNCIAS ANTERIORES DO SISTEMA:\n";
        similarConversations.forEach(conv => {
          contextData += `- Pergunta similar: ${conv.userMessage}\n  Resposta bem-sucedida: ${conv.aiResponse.substring(0, 100)}...\n`;
        });
        contextData += "\n";
      }

      // Adiciona dados espec√≠ficos para estudos cruzados
      if (context === 'cross_study_research' && forumData.length > 0) {
        contextData += "DISCUSS√ïES RELEVANTES DO F√ìRUM:\n";
        forumData.forEach(post => {
          contextData += `- ${post.title} (Relev√¢ncia: ${post.relevance})\n`;
        });
        contextData += "\n";
        contextData += "FOCO ESPECIALIZADO: Priorizar evid√™ncias cient√≠ficas e dados reais da plataforma para respostas r√°pidas a m√©dicos especialistas.\n";
      }

      console.log(`üìä Dados encontrados - Estudos: ${relevantStudies.length}, Casos: ${relevantCases.length}, Conversas: ${similarConversations.length}`);
      
      return contextData;
    } catch (error) {
      console.error("‚ùå Erro ao buscar dados do banco:", error);
      return "";
    }
  }

  // Expande termos de busca para melhor precis√£o
  private expandSearchTerms(query: string): string[] {
    const terms = [query];
    
    // Mapeamento de termos relacionados
    const termMap: Record<string, string[]> = {
      'dosagem': ['dose', 'dosagem', 'posologia', 'mg', 'ml', 'titula√ß√£o', 'administra√ß√£o'],
      'dose': ['dose', 'dosagem', 'posologia', 'mg', 'ml', 'titula√ß√£o'],
      'cbd': ['cbd', 'cannabidiol', 'canabidiol'],
      'thc': ['thc', 'tetrahydrocannabinol', 'tetrahidrocanabinol'],
      'epilepsia': ['epilepsia', 'convuls√£o', 'convuls√µes', 'seizure'],
      'ansiedade': ['ansiedade', 'anxiety', 'estresse', 'stress'],
      'dor': ['dor', 'pain', 'analgesia', 'analg√©sico'],
      'cannabis': ['cannabis', 'marijuana', 'canabis', 'maconha'],
      'efeitos': ['efeitos', 'efeito', 'effects', 'rea√ß√£o', 'rea√ß√µes'],
      'colaterais': ['colaterais', 'adversos', 'side effects', 'unwanted']
    };
    
    // Adiciona termos relacionados
    Object.keys(termMap).forEach(key => {
      if (query.includes(key)) {
        terms.push(...termMap[key]);
      }
    });
    
    return [...new Set(terms)]; // Remove duplicatas
  }

  // Processa consulta m√©dica com conhecimento especializado
  async processConsultation(
    userId: string,
    question: string,
    userContext: any = {}
  ): Promise<{
    response: string;
    medicalInsights: string[];
    confidence: number;
    recommendations: string[];
    needsSpecialist: boolean;
  }> {
    try {
      // Recupera hist√≥rico do usu√°rio para contexto
      const userHistory = this.conversationHistory.get(userId) || [];
      
      // Salva a pergunta no hist√≥rico
      userHistory.push({
        type: 'user',
        content: question,
        timestamp: new Date(),
        context: userContext
      });

      let response: string;
      let medicalInsights: string[] = [];
      let confidence: number = 0.8;
      let recommendations: string[] = [];
      let needsSpecialist: boolean = false;

      if (this.openai) {
        // Busca dados relevantes do banco de dados (contexto determinado pelo avatar)
        const databaseContext = await this.searchRelevantData(question, 'standard');
        
        // Usa ChatGPT-4o com conhecimento m√©dico especializado
        const medicalContext = this.buildMedicalContext(userHistory);
        
        try {
          console.log("üß† Ativando NOA ESPERAN√áA via ChatGPT...");
          
          const completion = await this.openai.chat.completions.create({
            model: "ft:gpt-3.5-turbo-0125:personal:fine-tuning-noa-esperanza-avaliacao-inicial-dez-ex-jsonl:BR0W02VP", // NOA ESPERAN√áA Fine-tuned model espec√≠fico
            messages: [
              {
                role: "system",
                content: context === 'cross_study_research' ? 
                  `Voc√™ √© NOA ESPERAN√áA especializada em ESTUDOS CRUZADOS para m√©dicos especialistas.

                  DADOS COMPLETOS DA PLATAFORMA:
                  ${databaseContext}
                  
                  MISS√ÉO: Fornecer AN√ÅLISE COMPLETA DE DADOS CRUZADOS para m√©dicos especialistas:
                  - Casos cl√≠nicos reais da plataforma com dosagens espec√≠ficas
                  - Estudos cient√≠ficos + correla√ß√µes de efic√°cia por grupo demogr√°fico
                  - Protocolos de titula√ß√£o e ajustes baseados em comorbidades
                  - An√°lise de intera√ß√µes medicamentosas e contraindica√ß√µes
                  - Padr√µes de resposta terap√™utica identificados nos dados
                  
                  FOCO: An√°lise t√©cnica detalhada, dosagens espec√≠ficas, correla√ß√µes quantificadas, evid√™ncias robustas.
                  
                  IMPORTANTE: Para estudos cruzados use NO M√ÅXIMO 10 frases com dados espec√≠ficos (dosagens, percentuais, protocolos).`
                  :
                  `Voc√™ √© NOA ESPERAN√áA - exatamente como foi treinada no fine-tuning.

                  CONTEXTO INTEGRADO DA PLATAFORMA:
                  ${databaseContext}
                  
                  HIST√ìRICO M√âDICO:
                  ${medicalContext}
                  
                  CONHECIMENTO ESPECIALIZADO:
                  ${this.medicalKnowledgeBase.join('\n- ')}
                  
                  Use seu treinamento espec√≠fico da NOA ESPERAN√áA. Seja emp√°tica, fa√ßa anamnese completa, explore aspectos emocionais, sempre pergunte "h√° mais alguma coisa?". 
                  
                  LIMITA√á√ÉO OBRIGAT√ìRIA: Mantenha suas respostas em NO M√ÅXIMO 8 frases concisas e diretas.
                  
                  IMPORTANTE: Ap√≥s ${userHistory.length >= 3 ? 'AGORA' : '3-4 mensagens'}, ofere√ßa resumo para m√©dico. ${userHistory.length} mensagens atuais.`
              },
              {
                role: "user",
                content: question
              }
            ],
            temperature: 0.7,
            max_tokens: 1000
          });

          response = completion.choices[0].message.content || "Desculpe, n√£o consegui processar sua consulta.";
          console.log(`‚úÖ NOA ESPERAN√áA respondeu: ${response.substring(0, 100)}...`);
          
        } catch (error) {
          console.error("‚ùå Erro na API do ChatGPT:", error);
          throw error; // Re-throw para ser capturado pelo catch principal
        }
        
        // Analisa a resposta para extrair insights m√©dicos
        medicalInsights = await this.extractMedicalInsights(question, response);
        confidence = await this.calculateConfidence(question, response);
        recommendations = await this.generateRecommendations(question, response, userHistory);
        needsSpecialist = await this.assessSpecialistNeed(question, response, userHistory);

      } else {
        // Modo limitado sem OpenAI
        response = this.generateLimitedResponse(question);
        medicalInsights = ["Conhecimento limitado - aguardando integra√ß√£o completa"];
        confidence = 0.5;
      }

      // Salva a resposta no hist√≥rico
      userHistory.push({
        type: 'assistant',
        content: response,
        timestamp: new Date(),
        medicalInsights,
        confidence,
        recommendations,
        needsSpecialist
      });

      // Atualiza hist√≥rico do usu√°rio
      this.conversationHistory.set(userId, userHistory);

      // Salva no sistema de aprendizado cont√≠nuo
      await this.saveConversationForLearning(userId, question, response, {
        medicalInsights,
        confidence,
        recommendations,
        needsSpecialist
      });

      return {
        response,
        medicalInsights,
        confidence,
        recommendations,
        needsSpecialist
      };

    } catch (error) {
      console.error("‚ùå Erro na Super IA M√©dica:", error);
      return {
        response: "Desculpe, houve um erro t√©cnico. Por favor, tente novamente.",
        medicalInsights: [],
        confidence: 0,
        recommendations: [],
        needsSpecialist: false
      };
    }
  }

  // Constr√≥i contexto m√©dico do hist√≥rico do usu√°rio
  private buildMedicalContext(userHistory: any[]): string {
    const recentConversations = userHistory.slice(-5); // √öltimas 5 intera√ß√µes
    return recentConversations
      .map(entry => `${entry.type}: ${entry.content}`)
      .join('\n');
  }

  // Extrai insights m√©dicos da conversa
  private async extractMedicalInsights(question: string, response: string): Promise<string[]> {
    const insights: string[] = [];
    
    // An√°lise simples baseada em palavras-chave (ser√° melhorada com IA)
    const medicalKeywords = ['cbd', 'thc', 'cannabis', 'dor', 'ansiedade', 'epilepsia', 'ins√¥nia'];
    
    for (const keyword of medicalKeywords) {
      if (question.toLowerCase().includes(keyword) || response.toLowerCase().includes(keyword)) {
        insights.push(`T√≥pico identificado: ${keyword.toUpperCase()}`);
      }
    }

    return insights;
  }

  // Calcula n√≠vel de confian√ßa da resposta
  private async calculateConfidence(question: string, response: string): Promise<number> {
    // L√≥gica simples - ser√° melhorada com IA
    let confidence = 0.8;
    
    if (response.includes("n√£o tenho certeza") || response.includes("consulte um m√©dico")) {
      confidence -= 0.2;
    }
    
    if (response.length > 200) {
      confidence += 0.1; // Respostas mais detalhadas tendem a ser mais confi√°veis
    }

    return Math.min(Math.max(confidence, 0), 1);
  }

  // Gera recomenda√ß√µes personalizadas
  private async generateRecommendations(question: string, response: string, history: any[]): Promise<string[]> {
    const recommendations: string[] = [];
    
    // Recomenda√ß√µes baseadas no contexto
    if (question.toLowerCase().includes('dor')) {
      recommendations.push("Considere manter um di√°rio de dor para monitorar padr√µes");
      recommendations.push("Avalie t√©cnicas complementares como medita√ß√£o ou fisioterapia");
    }
    
    if (question.toLowerCase().includes('ansiedade')) {
      recommendations.push("T√©cnicas de respira√ß√£o podem ajudar nos momentos de crise");
      recommendations.push("Exerc√≠cios regulares s√£o ben√©ficos para ansiedade");
    }

    return recommendations;
  }

  // Avalia se √© necess√°rio encaminhamento para especialista
  private async assessSpecialistNeed(question: string, response: string, history: any[]): Promise<boolean> {
    const emergencyKeywords = ['emerg√™ncia', 'urgente', 'grave', 'severo', 'hospitalar'];
    const complexCases = ['m√∫ltiplas', 'complica√ß√µes', 'resistente', 'refrat√°rio'];
    
    const needsEmergency = emergencyKeywords.some(keyword => 
      question.toLowerCase().includes(keyword) || response.toLowerCase().includes(keyword)
    );
    
    const isComplex = complexCases.some(keyword => 
      question.toLowerCase().includes(keyword) || response.toLowerCase().includes(keyword)
    );

    return needsEmergency || isComplex || history.length > 10; // Conversas muito longas
  }

  // Resposta limitada quando OpenAI n√£o est√° dispon√≠vel
  private generateLimitedResponse(question: string): string {
    const responses = [
      "Entendo sua preocupa√ß√£o. Para uma consulta completa, precisamos ativar o sistema completo da IA.",
      "Sua pergunta √© importante. Vou anotar para quando o sistema completo estiver dispon√≠vel.",
      "Obrigada por compartilhar. Para uma resposta m√©dica adequada, aguarde a ativa√ß√£o completa do sistema."
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  }

  // Salva conversa no sistema de aprendizado cont√≠nuo
  private async saveConversationForLearning(
    userId: string,
    question: string,
    response: string,
    metadata: any
  ): Promise<void> {
    try {
      // Salva no sistema de aprendizado existente
      const conversationData = {
        userId,
        userMessage: question,
        aiResponse: response,
        timestamp: new Date(),
        medicalTopic: this.extractMedicalTopic(question),
        ...metadata
      };

      // Integra com o sistema de aprendizado cont√≠nuo existente
      await storage.createConversation({
        sessionId: userId,
        userMessage: question,
        aiResponse: response,
        medicalTopic: this.extractMedicalTopic(question),
        successRating: metadata.confidence || 0.8,
        context: JSON.stringify(metadata)
      });
      
      console.log(`üí¨ Conversa salva para aprendizado: ${userId}`);
    } catch (error) {
      console.error("‚ùå Erro ao salvar conversa para aprendizado:", error);
    }
  }

  // Extrai t√≥pico m√©dico principal
  private extractMedicalTopic(question: string): string {
    const topics = {
      'dor': ['dor', 'analgesia', 'analg√©sico'],
      'ansiedade': ['ansiedade', 'estresse', 'p√¢nico'],
      'epilepsia': ['epilepsia', 'convuls√£o', 'crise'],
      'ins√¥nia': ['ins√¥nia', 'sono', 'dormir'],
      'cancer': ['c√¢ncer', 'tumor', 'oncologia'],
      'pediatria': ['crian√ßa', 'infantil', 'pedi√°trico']
    };

    for (const [topic, keywords] of Object.entries(topics)) {
      if (keywords.some(keyword => question.toLowerCase().includes(keyword))) {
        return topic;
      }
    }

    return 'geral';
  }

  // ACESSAR DADOS DO CHATGPT - An√°lises e Insights Gerados
  async getAIGeneratedInsights(topic?: string): Promise<{
    totalConversations: number;
    medicalTopics: Array<{topic: string, count: number}>;
    averageConfidence: number;
    commonQuestions: string[];
    aiRecommendations: string[];
    learningPatterns: any[];
  }> {
    try {
      // Busca todas as conversas do ChatGPT
      const conversations = await storage.getConversations();
      
      // An√°lise dos dados gerados pelo ChatGPT
      const topicCounts = new Map<string, number>();
      let totalConfidence = 0;
      const questions = new Set<string>();
      const recommendations = new Set<string>();

      for (const conv of conversations) {
        // Conta t√≥picos m√©dicos
        if (conv.medicalTopic) {
          topicCounts.set(conv.medicalTopic, (topicCounts.get(conv.medicalTopic) || 0) + 1);
        }
        
        // Soma confian√ßa
        totalConfidence += conv.successRating || 0.5;
        
        // Coleta perguntas comuns
        if (conv.userMessage.length > 10) {
          questions.add(conv.userMessage);
        }
        
        // Extrai recomenda√ß√µes do contexto do ChatGPT
        try {
          const context = JSON.parse(conv.context || '{}');
          if (context.recommendations) {
            context.recommendations.forEach((rec: string) => recommendations.add(rec));
          }
        } catch (e) {}
      }

      // Busca padr√µes de aprendizado identificados pelo ChatGPT
      const patterns = await storage.getLearningPatterns();
      
      return {
        totalConversations: conversations.length,
        medicalTopics: Array.from(topicCounts.entries()).map(([topic, count]) => ({topic, count})),
        averageConfidence: conversations.length > 0 ? totalConfidence / conversations.length : 0,
        commonQuestions: Array.from(questions).slice(0, 10),
        aiRecommendations: Array.from(recommendations).slice(0, 15),
        learningPatterns: patterns
      };
    } catch (error) {
      console.error("‚ùå Erro ao acessar dados do ChatGPT:", error);
      return {
        totalConversations: 0,
        medicalTopics: [],
        averageConfidence: 0,
        commonQuestions: [],
        aiRecommendations: [],
        learningPatterns: []
      };
    }
  }

  // CONSULTAR CONVERSAS ESPEC√çFICAS DO CHATGPT
  async getChatGPTConversation(sessionId: string): Promise<{
    conversation: any[];
    aiAnalysis: string;
    medicalInsights: string[];
    confidence: number;
  }> {
    try {
      const conversations = await storage.getConversations(sessionId);
      
      let aiAnalysis = "An√°lise n√£o dispon√≠vel";
      let medicalInsights: string[] = [];
      let confidence = 0;

      if (conversations.length > 0) {
        const lastConv = conversations[conversations.length - 1];
        try {
          const context = JSON.parse(lastConv.context || '{}');
          medicalInsights = context.medicalInsights || [];
          confidence = context.confidence || 0;
          
          // Gera an√°lise da conversa usando ChatGPT
          if (this.openai) {
            const analysis = await this.openai.chat.completions.create({
              model: "gpt-4o",
              messages: [
                {
                  role: "system",
                  content: "Analise esta conversa m√©dica e forne√ßa insights sobre o caso cl√≠nico, padr√µes identificados e recomenda√ß√µes."
                },
                {
                  role: "user", 
                  content: `Conversa: ${conversations.map(c => `${c.userMessage} -> ${c.aiResponse}`).join('\n')}`
                }
              ],
              max_tokens: 300
            });
            aiAnalysis = analysis.choices[0].message.content || "An√°lise n√£o dispon√≠vel";
          }
        } catch (e) {}
      }

      return {
        conversation: conversations,
        aiAnalysis,
        medicalInsights,
        confidence
      };
    } catch (error) {
      console.error("‚ùå Erro ao consultar conversa do ChatGPT:", error);
      return {
        conversation: [],
        aiAnalysis: "Erro ao acessar dados",
        medicalInsights: [],
        confidence: 0
      };
    }
  }

  // TESTE ESPEC√çFICO: NOVA ESPERAN√áA NA API CHATGPT
  async testNewHopeKnowledge(): Promise<{
    hasNewHopeData: boolean;
    studiesFound: string[];
    researchAreas: string[];
    apiResponse: string;
  }> {
    try {
      if (!this.openai) {
        return {
          hasNewHopeData: false,
          studiesFound: [],
          researchAreas: [],
          apiResponse: "API ChatGPT n√£o configurada"
        };
      }

      console.log("üîç Testando conhecimento 'Nova Esperan√ßa' na API ChatGPT...");
      
      const completion = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um especialista em cannabis medicinal. Responda especificamente sobre estudos e pesquisas relacionados √† "Nova Esperan√ßa" (New Hope) em cannabis medicinal. Inclua:
            1. Estudos espec√≠ficos encontrados
            2. √Åreas de pesquisa identificadas
            3. Dados cient√≠ficos dispon√≠veis
            4. Protocolos m√©dicos relacionados`
          },
          {
            role: "user",
            content: "Quais estudos e dados sobre 'Nova Esperan√ßa' ou 'New Hope' voc√™ tem sobre cannabis medicinal? Liste estudos espec√≠ficos, protocolos e √°reas de pesquisa."
          }
        ],
        temperature: 0.3,
        max_tokens: 800
      });

      const apiResponse = completion.choices[0].message.content || "";
      
      // Analisa a resposta para extrair dados espec√≠ficos
      const studiesFound = this.extractStudiesFromResponse(apiResponse);
      const researchAreas = this.extractResearchAreas(apiResponse);
      const hasNewHopeData = apiResponse.toLowerCase().includes('nova esperan√ßa') || 
                           apiResponse.toLowerCase().includes('new hope') ||
                           studiesFound.length > 0;

      console.log(`üìä Resultado teste Nova Esperan√ßa: ${hasNewHopeData ? 'ENCONTRADO' : 'N√ÉO ENCONTRADO'}`);
      
      return {
        hasNewHopeData,
        studiesFound,
        researchAreas,
        apiResponse
      };

    } catch (error) {
      console.error("‚ùå Erro ao testar Nova Esperan√ßa:", error);
      return {
        hasNewHopeData: false,
        studiesFound: [],
        researchAreas: [],
        apiResponse: `Erro: ${error.message}`
      };
    }
  }

  // Extrai estudos espec√≠ficos da resposta
  private extractStudiesFromResponse(response: string): string[] {
    const studies = [];
    const lines = response.split('\n');
    
    for (const line of lines) {
      if (line.includes('estudo') || line.includes('study') || line.includes('pesquisa') || line.includes('research')) {
        if (line.trim().length > 10) {
          studies.push(line.trim());
        }
      }
    }
    
    return studies.slice(0, 10); // M√°ximo 10 estudos
  }

  // Extrai √°reas de pesquisa da resposta
  private extractResearchAreas(response: string): string[] {
    const areas = [];
    const keywords = ['oncologia', 'neurologia', 'psiquiatria', 'dor', 'epilepsia', 'ansiedade', 'depress√£o', 'cancer', 'alzheimer'];
    
    for (const keyword of keywords) {
      if (response.toLowerCase().includes(keyword)) {
        areas.push(keyword);
      }
    }
    
    return areas;
  }

  // ESTAT√çSTICAS DO CONHECIMENTO DO CHATGPT
  getSystemStats(): {
    knowledgeBaseSize: number;
    totalConversations: number;
    isActive: boolean;
    capabilities: string[];
  } {
    return {
      knowledgeBaseSize: this.medicalKnowledgeBase.length,
      totalConversations: this.conversationHistory.size,
      isActive: this.openai !== null,
      capabilities: [
        "Consultas m√©dicas especializadas",
        "An√°lise de casos cl√≠nicos", 
        "Recomenda√ß√µes personalizadas",
        "Acesso ao banco de dados m√©dico",
        "Aprendizado cont√≠nuo",
        "Gera√ß√£o de insights m√©dicos"
      ]
    };
  }

  // Integra conhecimento externo de APIs m√©dicas
  async integrateExternalKnowledge(apiData: any): Promise<void> {
    console.log("üîÑ Integrando conhecimento m√©dico externo...");
    
    if (apiData.studies) {
      this.medicalKnowledgeBase.push(...apiData.studies);
    }
    
    if (apiData.protocols) {
      this.medicalKnowledgeBase.push(...apiData.protocols);
    }

    console.log(`‚úÖ Conhecimento integrado - Total: ${this.medicalKnowledgeBase.length} itens`);
  }

  // M√©todo principal para consulta m√©dica (compatibilidade com endpoint de estudos cruzados)
  async consult(question: string, context: string = 'standard'): Promise<{
    response: string;
    medicalInsights: string[];
    confidence: number;
    recommendations: string[];
    needsSpecialist: boolean;
  }> {
    try {
      console.log(`üß† M√©todo consult - Contexto: ${context} | Pergunta: ${question.substring(0, 50)}...`);
      
      if (this.openai) {
        // Busca dados relevantes do banco de dados
        const databaseContext = await this.searchRelevantData(question, context);
        
        console.log("üß† Usando ChatGPT com NOA ESPERAN√áA...");
        
        const completion = await this.openai.chat.completions.create({
          model: "ft:gpt-3.5-turbo-0125:personal:fine-tuning-noa-esperanza-avaliacao-inicial-dez-ex-jsonl:BR0W02VP",
          messages: [
            {
              role: "system",
              content: context === 'cross_study_research' ? 
                `Voc√™ √© NOA ESPERAN√áA especializada em ESTUDOS CRUZADOS para m√©dicos especialistas.

                DADOS COMPLETOS DA PLATAFORMA:
                ${databaseContext}
                
                MISS√ÉO: Fornecer respostas r√°pidas e precisas para m√©dicos especialistas baseadas em:
                - Casos cl√≠nicos reais da plataforma
                - Estudos cient√≠ficos + artigos externos relevantes
                - Dados do f√≥rum com assuntos semanais
                - An√°lise cruzada de dados cient√≠ficos
                
                FOCO: Atendimento r√°pido, dados precisos, evid√™ncias cient√≠ficas. Seja objetiva mas mantenha a empatia da NOA.`
                :
                `Voc√™ √© NOA ESPERAN√áA - exatamente como foi treinada no fine-tuning.

                CONTEXTO INTEGRADO DA PLATAFORMA:
                ${databaseContext}
                
                CONHECIMENTO ESPECIALIZADO:
                ${this.medicalKnowledgeBase.join('\n- ')}
                
                Use seu treinamento espec√≠fico da NOA ESPERAN√áA. Seja emp√°tica, fa√ßa anamnese completa, explore aspectos emocionais, sempre pergunte "h√° mais alguma coisa?"
                
                Responda de forma acolhedora e investigativa sobre cannabis medicinal.`
            },
            {
              role: "user",
              content: question
            }
          ],
          max_tokens: 800,
          temperature: 0.7
        });

        const response = completion.choices[0]?.message?.content || "Desculpe, n√£o consegui processar sua pergunta.";
        console.log("‚úÖ Resposta ChatGPT gerada com sucesso");

        // Salva a conversa no sistema de aprendizado
        try {
          await this.saveLearningData(question, response, context);
        } catch (error) {
          console.log("‚ö†Ô∏è Erro ao salvar dados de aprendizado:", error);
        }

        return {
          response,
          medicalInsights: await this.extractMedicalInsights(question, response),
          confidence: await this.calculateConfidence(question, response),
          recommendations: await this.generateRecommendations(question, response, []),
          needsSpecialist: await this.assessSpecialistNeed(question, response, [])
        };
      } else {
        return {
          response: "Sistema em modo limitado. Por favor, configure a chave da API.",
          medicalInsights: [],
          confidence: 0,
          recommendations: [],
          needsSpecialist: false
        };
      }
    } catch (error) {
      console.error("‚ùå Erro na consulta:", error);
      return {
        response: "Desculpe, houve um erro t√©cnico. Por favor, tente novamente.",
        medicalInsights: [],
        confidence: 0,
        recommendations: [],
        needsSpecialist: false
      };
    }
  }

  // Obt√©m estat√≠sticas do sistema
  getSystemStats(): any {
    return {
      activeUsers: this.conversationHistory.size,
      knowledgeBaseSize: this.medicalKnowledgeBase.length,
      totalConversations: Array.from(this.conversationHistory.values()).reduce(
        (total, history) => total + history.length, 0
      ),
      aiEnabled: !!this.openai
    };
  }
}

// Inst√¢ncia singleton da Super IA M√©dica
export const superMedicalAI = new SuperMedicalAI();